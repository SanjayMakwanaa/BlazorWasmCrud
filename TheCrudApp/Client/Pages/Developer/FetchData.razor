@page "/developer"
@inject HttpClient client
@inject IJSRuntime js

<h3>Developers Team</h3>
 
<div class="form-group">
    <a class="btn btn-outline-success" href="developer/create"><i class="oi oi-outline-plus"></i> Create New</a>
</div>
<br>




@if (developers == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else if (developers.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Experience (Years)</th>
                    <th class="ml-5">Actions</th>
                </tr>
            </thead>
            <tbody>
            @foreach (Developer dev in developers)
            {
                        <tr>
                            <td>@dev.Id</td>
                            <td>@dev.FirstName</td>
                            <td>@dev.LastName</td>
                            <td>@dev.Email</td>
                            <td>@dev.Experience</td>
                            <td>
                                <a class="btn btn-outline-success" href="developer/edit/@dev.Id"><i class="oi oi-pencil"></i></a>
                                <button class="btn btn-outline-danger ml-5" @onclick="@(() => Delete(dev.Id))"><i class="oi oi-trash"></i></button>
                            </td>
                        </tr>
            }
            </tbody>
        </table>
}
@code {

    Developer[] developers { get; set; }
    protected override async Task OnInitializedAsync()
    {
        developers = await client.GetFromJsonAsync<Developer[]>("api/developer");
    }

    async Task Delete(int developerId)
    {
        var dev = developers.First(x => x.Id == developerId);
        var result = await js.InvokeAsync<bool>("swal", new
        {
            title = $"Do you want to delete {dev.FirstName}'s ({dev.Id}) Record?",
            icon = "warning",
            buttons = new[] { "No", "Yes" },
            dangerMode = true
        });
        if (result)
        {
            await client.DeleteAsync($"api/developer/{developerId}");
            await OnInitializedAsync();
            await js.InvokeVoidAsync("swal", new
            {
                title = "Deleted!",
                text = $"{dev.FirstName}'s record has been successfully deleted.",
                icon = "success"
            });
        }
    }
}